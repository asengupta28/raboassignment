
	I. Run on WINDOWS:
    =================

	1.	Start Redis server:
		- Download & Intall Redis distribution
		- Open a DOS Command prompt
		- Goto <REDIS-INSTALL-FOLDER>
			- cd <REDIS-INSTALL-FOLDER>
			Ex:
				- cd E:\Redis2.4.5
		- Use command to start:
			redis-server.exe
			Ex:
				- E:\Redis2.4.5\redis-server.exe

	2.	Start MySQL:
		- Download & Install MySQL Server distribution
		- Open a DOS Command prompt
		- Goto <MySQL-INSTALL-FOLDER>\bin
			- cd <MySQL-INSTALL-FOLDER>\bin
			Ex:
				- cd E:\mysql-8.0.26-winx64\bin
		- Use commands as below:
			Iniatilize: mysqld --initialize-insecure
			Start Server: mysqld.exe -u root --console --standalone [--debug]
			***** This will start MySQL atabase server on default port (3306)
		- Open a DOS command prompt and use command below to check MySQL port:
			netstat -ano | findstr 3306

	3.	Setup database:
		- Open a DOS Command prompt
		- Goto <MySQL-INSTALL-FOLDER>\bin
			- cd <MySQL-INSTALL-FOLDER>\bin
			Ex:
				- cd E:\mysql-8.0.26-winx64\bin
		- Connect to Client CLI:
			- MySQL --user root

		- Create Database and User:
			- Enter commands as below:
				CREATE DATABASE jpa_example; -- Creates the  database
				SHOW DATABASES;

				CREATE USER 'jcguser'@'%' identified by 'mypassword'; -- Creates the user
				GRANT ALL ON jpa_example.* TO 'jcguser'@'%'; -- Grants all privileges to the new user on the database
				USE jpa_example;

		- Create Table as below:
			CREATE TABLE customer
			(
				id bigint NOT NULL AUTO_INCREMENT,
				first_name varchar(255) NOT NULL,
				last_name varchar(255) NOT NULL,
				age int NOT NULL,
				address varchar(255) NOT NULL,
				PRIMARY KEY ( id )
			);

		- Set AUTO_INCREMENT sequence start base value
			- ALTER TABLE customer AUTO_INCREMENT=1000;
		- check table created
			- SHOW TABLES;
			- DESCRIBE customer;

		- If you want initial Customer data in the table use commands as below:
			INSERT INTO customer (id,first_name,last_name,age,address) values(1001, 'Abhijit', 'Sengupta', 40, 'INDIA');
			INSERT INTO customer (id,first_name,last_name,age,address) values(1002, 'Shauvik', 'Baksi', 40, 'NETHERLANDS');
			COMMIT;

		- Check sample data added as below:
			- SELECT * FROM customer;

	4.	Run application:
			- build application:
				- <APACHE-MAVEN-INSTALL-FOLDER>/bin/mvn spring:boot-run
			OR
			- build application package
				- <APACHE-MAVEN-INSTALL-FOLDER>/bin/mvn package
				- check under generated "target" folder for the generated ".JAR" file
				- java -jar springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar

			*** - The Application runs on Port 8080

	5.	Open a Browser:
		- run URLS as below:
		- Get All Customers:
			http://localhost:8080/customers/
		- Get a Customer against an ID:
			http://localhost:8080/customers/<ID>
		Insert a New Customer:
			http://localhost:8080/customers/<Fist Name>/<Last Name>/Age/<Address>
		Update an Existing Customer:
			http://localhost:8080/customers/<ID>/<First Name>/<Last Name>/Age/<Address>
		Delete an Existing Cutomer:
			http://localhost:8080/customers/<ID>

	6.	Shutdown all:
		- CTRL + C at the Application pompt
		- CTRL + C at the Redis server
		- Goto <MySQL-INSTALL-FOLDER>\bin and use command: mysqladmin.exe --user root shutdown

==================================================================================================================

II. Run On DOCKER:
    =============

	1. Create Docker Bridge NETWORK:
		- docker network create rabo-net-springjpamysqlredis

	2 Setup MySQL:
		- docker run --name rabo-mysql --network rabo-net-springjpamysqlredis -e MYSQL_ROOT_PASSWORD=root -d mysql/mysql-server:latest
		- check container logs:
			- docker container logs -f rabo-mysql
		- connect to MySQL:
			- docker exec -it rabo-mysql mysql -uroot -p
		- setup DB for SpringBoot application:
			- run SQL commands as below:
				CREATE DATABASE jpa_example; -- Creates the  database
				SHOW DATABASES;
				CREATE USER 'jcguser'@'%' identified by 'mypassword'; -- Creates the user
				GRANT ALL ON jpa_example.* TO 'jcguser'@'%'; -- Grants all privileges to the new user on the database
				USE jpa_example;

				CREATE TABLE customer
				(
					id bigint NOT NULL AUTO_INCREMENT,
					first_name varchar(255) NOT NULL,
					last_name varchar(255) NOT NULL,
					age int NOT NULL,
					address varchar(255) NOT NULL,
					PRIMARY KEY ( id )
				);

				ALTER TABLE customer AUTO_INCREMENT=1000;

			- If you want initial Customer data in the table use commands as below:
				INSERT INTO customer (id,first_name,last_name,age,address) values(1001, 'Abhijit', 'Sengupta', 40, 'INDIA');
				INSERT INTO customer (id,first_name,last_name,age,address) values(1002, 'Shauvik', 'Baksi', 40, 'NETHERLANDS');
				COMMIT;

			- Check sample data added as below:
				SELECT * FROM customer;

	3. Setp Redis [standalone]:
		- docker container stop rabo-redis
		- docker container rm rabo-redis
		- docker run --name rabo-redis --network rabo-net-springjpamysqlredis -v /home/ec2-user/apps/docker/redis:/usr/local/etc/redis -dp 6379:6379 redis redis-server /usr/local/etc/redis/redis.conf
		- check connecion:
			- sudo netstat -pln | grep 6379
		- check container logs:
			- docker container logs -f rabo-redis
		- check CLI:
			- sudo docker exec -it rabo-redis sh
				- "redis-cli" at the prompt
				- enter ping or PING
					- check output: "PONG"
					- quit
				- exit
		- Inspect Redis IP:PORT on the Docker Bridge NETWORK:
			- docker inspect rabo-net-springjpamysqlredis
				- check for section "Name": "rabo-redis"
					- check "IPv4Address": under above section

	4. Setup SpringBoot Application:
		- Download & Install Apache Maven

		- Download Source code from GitHub:
			- use command: git clone https://github.com/asengupta28/raboassignment.git
			or 
			- download as: https://github.com/asengupta28/raboassignment/archive/refs/heads/main.zip
			- then UNZIP into a required folder

		- Use command as below:
			- set JAVA_HOME=<JDK 11-INSTALL-FOLDER>

		- build application:
			- <APACHE-MAVEN-INSTALL-FOLDER>/bin/mvn package
			- check generated ".JAR" file under "./target"
		- Goto folder to create dockerfile:
		- copy the generated .JAR file to current folder

		***** - Dockerize the application JAR file:
			- vi dockerfile
			- add content as below:
				FROM openjdk:11
				COPY ./springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar
				CMD ["java","-jar","springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar"]
			- build & run Docker Image:
				- docker image build -t springbootjparediscache .
				- docker container run --network rabo-net-springjpamysqlredis --name rabo-springbootjparediscache -p 8080:8080 -d springbootjparediscache

		*** - The Application runs on Port 8080

	5.	Open a Browser:
		- run URLS as below:
		- Get All Customers:
			http://localhost:8080/customers/
		- Get a Customer against an ID:
			http://localhost:8080/customers/<ID>
		Insert a New Customer:
			http://localhost:8080/customers/<Fist Name>/<Last Name>/Age/<Address>
		Update an Existing Customer:
			http://localhost:8080/customers/<ID>/<First Name>/<Last Name>/Age/<Address>
		Delete an Existing Cutomer:
			http://localhost:8080/customers/<ID>


	6.	Shutdown all:
		- docker container ls
		- check container IDs for "rabo-springbootjparediscache", "rabo-redis" and "rabo-mysql"
		- Use command: docker container stop <CONTAINER-ID-FOR-rabo-springbootjparediscache>
		- Use command: docker container stop <CONTAINER-ID-FOR-rabo-rabo-redis>
		- Use command: docker container stop <CONTAINER-ID-FOR-rabo-rabo-mysql>

==================================================================================================================================================
