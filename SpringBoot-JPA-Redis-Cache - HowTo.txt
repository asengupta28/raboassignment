
Github upload:
=============

	***************************
	GitHub a/c:	asengupta28@hotmail.com/ Putki1508@)!$
	Token: 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
	***************************

	- create file ".gitignore" with texts below:
		mvnw
		mvnw.cmd
		*.txt
		*.class
		*.jar
		*.zip
		.mvn
		target

	- create file "buildspec.yml" with texts below:
		version: 0.2

		phases:
		  install:
			runtime-versions:
			  java: corretto11
		  pre_build:
			commands:
			  - echo Nothing to do in the pre_build phase...
		  build:
			commands:
			  - echo Build started on `date`
			  - mvn install
		  post_build:
			commands:
			  - echo Build completed on `date`
		artifacts:
		  files:
			- target/springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar

	- create file "appspec.yml" with texts below:
		version: 0.0
		os: linux
		files:
		  - source: ./rabobank.jparediscache-0.0.1-SNAPSHOT.jar
			destination: /tmp

	- Open project folder and enter commands as below:
		cd E:\Avijit\lanosrep\Applications\Rabo Bank - Assignment

		git config --global core.excludesfile ~/.gitignore_global

		echo "# Rabo Bank assignment" >> README.md
		git init -b main
		git add .
		git commit -m "First commit"
		git remote add origin https://github.com/asengupta28/raboassignment.git
		git branch -M main
			git remote -v
		git push origin master
			git push -u origin main



	============================================================================================

Sample URLs:
===========

	Get All:
		http://localhost:8080/customers/

	Get against ID:
		http://localhost:8080/customers/<ID>

	Insert New:
		http://localhost:8080/customers/<FName>/<LName>/Age/<Address>

	Update Existing:
		http://localhost:8080/customers/<ID>/<FName>/<LName>/Age/<Address>

	Delete Existing:
		http://localhost:8080/customers/<ID>


	===================================================================================


I. Run on WINDOWS:
   =================

	00.	To build JAR file:
		- .\mvnw package
	01.	To compile only:
		- .\mvnw compile
	02.	To Build and Run:
		- .\mvnw spring-boot:run

	1.	Start Redis server:
		- E:\Redis2.4.5>redis-server.exe

	2.	Start MySQL:
		- Iniatilize: mysqld --initialize-insecure
		- Start Server: mysqld.exe -u root --console --standalone [--debug]
		- Check port: netstat -ano | findstr 3306

	3.	Setup database:
		- Connect to Client CLI:
			- MySQL --user root

		- Create Database and User:
			- Enter commands as below:
				CREATE DATABASE jpa_example; -- Creates the  database
				SHOW DATABASES;

				CREATE USER 'jcguser'@'%' identified by 'mypassword'; -- Creates the user
				GRANT ALL ON jpa_example.* TO 'jcguser'@'%'; -- Grants all privileges to the new user on the database
				USE jpa_example;

		- Create Table as below:
			CREATE TABLE customer
			(
				id bigint NOT NULL AUTO_INCREMENT,
				first_name varchar(255) NOT NULL,
				last_name varchar(255) NOT NULL,
				age int NOT NULL,
				address varchar(255) NOT NULL,
				PRIMARY KEY ( id )
			);

		- Set AUTO_INCREMENT sequence start base value
			- ALTER TABLE customer AUTO_INCREMENT=1000;
		- check table created
			- SHOW TABLES;
			- DESCRIBE customer;

		- Add sample data as below:
			INSERT INTO customer (id,first_name,last_name,age,address) values(1001, 'Abhijit', 'Sengupta', 40, 'INDIA');
			INSERT INTO customer (id,first_name,last_name,age,address) values(1002, 'Shauvik', 'Baksi', 40, 'NETHERLANDS');
			INSERT INTO customer (id,first_name,last_name,age,address) values(1003, 'Saunak', 'XXXXX', 40, 'NETHERLANDS');
			INSERT INTO customer (id,first_name,last_name,age,address) values(1004, 'XXXXX', 'YYYYY', 40, 'NETHERLANDS');
			COMMIT;

		- Check sample data added as below:
			- SELECT * FROM customer;

	4.	Run application:
		- java -jar springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar
		- Open browser:
		- Retrieve all Customers:
			- http://localhost:8080/customers/
		- Retrieve by ID:
			- http://localhost:8080/customers/<ID>

	5.	Shutdown MySQL Server
		- mysqladmin.exe --user root shutdown

==================================================================================================================

II. Run On DOCKER:
    =============

	1. Create Docker Bridge NETWORK:
		- docker network create rabo-net-springjpamysqlredis

	2 Setup MySQL:
		- docker run --name rabo-mysql --network rabo-net-springjpamysqlredis -e MYSQL_ROOT_PASSWORD=root -d mysql/mysql-server:latest
		- check container logs:
			- docker container logs -f rabo-mysql
		- connect to MySQL:
			- docker exec -it rabo-mysql mysql -uroot -p
		- setup DB for SpringBoot application:
			- run SQL commands as below:
				CREATE DATABASE jpa_example; -- Creates the  database
				SHOW DATABASES;
				CREATE USER 'jcguser'@'%' identified by 'mypassword'; -- Creates the user
				GRANT ALL ON jpa_example.* TO 'jcguser'@'%'; -- Grants all privileges to the new user on the database
				USE jpa_example;

				CREATE TABLE customer
				(
					id bigint NOT NULL AUTO_INCREMENT,
					first_name varchar(255) NOT NULL,
					last_name varchar(255) NOT NULL,
					age int NOT NULL,
					address varchar(255) NOT NULL,
					PRIMARY KEY ( id )
				);

				ALTER TABLE customer AUTO_INCREMENT=1000;

				INSERT INTO customer (id,first_name,last_name,age,address) values(1001, 'Abhijit', 'Sengupta', 40, 'INDIA');
				INSERT INTO customer (id,first_name,last_name,age,address) values(1002, 'Shauvik', 'Baksi', 40, 'NETHERLANDS');
				INSERT INTO customer (id,first_name,last_name,age,address) values(1003, 'Saunak', 'XXXXX', 40, 'NETHERLANDS');
				INSERT INTO customer (id,first_name,last_name,age,address) values(1004, 'XXXXX', 'YYYYY', 40, 'NETHERLANDS');
				INSERT INTO customer (first_name,last_name,age,address) values('AAAA', 'BBBB', 99, 'XYZ');
				COMMIT;

				SELECT * FROM customer;

	3. Setp Redis [standalone]:
		- docker container stop rabo-redis
		- docker container rm rabo-redis
		- docker run --name rabo-redis --network rabo-net-springjpamysqlredis -v /home/ec2-user/apps/docker/redis:/usr/local/etc/redis -dp 6379:6379 redis redis-server /usr/local/etc/redis/redis.conf
		- check connecion:
			- sudo netstat -pln | grep 6379
		- check container logs:
			- docker container logs -f rabo-redis
		- check CLI:
			- sudo docker exec -it rabo-redis sh
				- "redis-cli" at the prompt
				- enter ping or PING
					- check output: "PONG"
					- quit
				- exit
		- Inspect Redis IP:PORT on the Docker Bridge NETWORK:
			- docker inspect rabo-net-springjpamysqlredis
				- check for section "Name": "rabo-redis"
					- check "IPv4Address": under above section

	4. Setup SpringBoot Application:
		- Goto folder with source code
		- build package:
			- <APACHE-MAVEN-INSTALL-FOLDER>/bin/mvn package
		- check generated ".JAR" file under "./target"
		- Goto folder to create dockerfile:
		- copy the generated .JAR file to current folder
		- vi dockerfile
		- add content as below:
			FROM openjdk:11
			COPY ./springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar
			CMD ["java","-jar","springboot-jpa-redis-cache-0.0.1-SNAPSHOT.jar"]
		- build & run Docker Image:
			- docker image build -t springbootjparediscache .
			- docker container run --network rabo-net-springjpamysqlredis --name rabo-springbootjparediscache -p 8080:8080 -d springbootjparediscache
